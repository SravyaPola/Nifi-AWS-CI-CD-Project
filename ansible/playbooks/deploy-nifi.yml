---
- name: Full NiFi Deployment
  hosts: ec2
  remote_user: ubuntu
  become: yes
  vars:
    nifi_home: /opt/nifi-1.26.0
    nifi_user: ubuntu
    nifi_group: ubuntu
    nifi_artifact_url: https://archive.apache.org/dist/nifi/1.26.0/nifi-1.26.0-bin.zip
    nifi_zip: nifi-1.26.0-bin.zip
    remote_zip_path: /home/ubuntu/nifi-1.26.0-bin.zip
  tasks:
    - name: Ensure unzip is installed
      apt:
        name: unzip
        state: present
        update_cache: yes
    - name: Download NiFi artifact
      get_url:
        url: "{{ nifi_artifact_url }}"
        dest: "{{ remote_zip_path }}"
        mode: "0644"
    - name: Unarchive NiFi
      unarchive:
        src: "{{ remote_zip_path }}"
        dest: /opt
        remote_src: yes
        owner: "{{ nifi_user }}"
        group: "{{ nifi_group }}"
    - name: Set ownership on NiFi directory
      file:
        path: "{{ nifi_home }}"
        owner: "{{ nifi_user }}"
        group: "{{ nifi_group }}"
        recurse: yes
    - name: Ensure NiFi scripts are executable
      file:
        path: "{{ nifi_home }}/bin/nifi.sh"
        mode: "0755"
    - name: Ensure NiFi logs directory exists
      file:
        path: "{{ nifi_home }}/logs"
        state: directory
        owner: "{{ nifi_user }}"
        group: "{{ nifi_group }}"
        mode: "0755"
    - name: Find JAVA_HOME
      shell: readlink -f $(which java) | sed "s:bin/java::"
      register: java_home_path
      changed_when: false
    - name: Configure java.home in bootstrap.conf
      lineinfile:
        path: "{{ nifi_home }}/conf/bootstrap.conf"
        regexp: ^java\.home=
        line: java.home={{ java_home_path.stdout }}
    - name: Configure NiFi HTTP host
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.web\.http\.host=
        line: nifi.web.http.host=0.0.0.0
        create: yes
    - name: Configure NiFi HTTP port
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.web\.http\.port=
        line: nifi.web.http.port=8080
        create: yes
    - name: Blank out HTTP network interface default
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.web\.http\.network\.interface\.default=
        line: nifi.web.http.network.interface.default=
        create: yes
    - name: Comment out all HTTPS & security props
      replace:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^(nifi\.web\.https\..*|nifi\.security\..*)
        replace: "# \\0"
    - name: Enable Site-to-Site over HTTP
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.remote\.input\.http\.enabled=
        line: nifi.remote.input.http.enabled=true
        create: yes
    - name: Set Site-to-Site HTTP transaction TTL
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.remote\.input\.http\.transaction\.ttl=
        line: nifi.remote.input.http.transaction.ttl=30 sec
        create: yes
    - name: Set content cache expiration
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.remote\.contents\.cache\.expiration=
        line: nifi.remote.contents.cache.expiration=30 secs
        create: yes
    - name: Allow NiFi UI through UFW
      ufw:
        rule: allow
        port: "8080"
        proto: tcp
    - name: Start or restart NiFi now that all config is in place
      become_user: "{{ nifi_user }}"
      shell: |
        {{ nifi_home }}/bin/nifi.sh restart || {{ nifi_home }}/bin/nifi.sh start
      environment:
        JAVA_HOME: "{{ java_home_path.stdout }}"
    - name: Wait for NiFi to bind HTTP on 8080
      become: false
      run_once: true
      delegate_to: localhost
      wait_for:
        host: "{{ hostvars[inventory_hostname].ansible_host | default(inventory_hostname) }}"
        port: 8080
        state: started
        delay: 10
        timeout: 300
    - name: Print NiFi UI URL
      debug:
        msg: NiFi is now reachable at http://{{ inventory_hostname }}:8080/nifi/
