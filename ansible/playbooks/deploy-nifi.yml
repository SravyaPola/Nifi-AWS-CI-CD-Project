---
- name: Deploy and start NiFi
  hosts: ec2
  become: yes
  vars:
    nifi_home: /opt/nifi-1.26.0
    nifi_user: ubuntu
    nifi_group: ubuntu
  tasks:
    - name: Ensure unzip is installed
      apt:
        name: unzip
        state: present
    - name: Unarchive NiFi to {{ nifi_home }}
      unarchive:
        src: /home/ubuntu/nifi-1.26.0-bin.zip
        dest: /opt
        remote_src: yes
        owner: "{{ nifi_user }}"
        group: "{{ nifi_group }}"
    - name: Set ownership on NiFi directory
      file:
        path: "{{ nifi_home }}"
        recurse: yes
        owner: "{{ nifi_user }}"
        group: "{{ nifi_group }}"
    - name: Ensure NiFi scripts are executable
      file:
        path: "{{ nifi_home }}/bin/nifi.sh"
        mode: "0755"
    - name: Ensure NiFi logs directory exists
      file:
        path: "{{ nifi_home }}/logs"
        state: directory
        owner: "{{ nifi_user }}"
        group: "{{ nifi_group }}"
        mode: "0755"
    - name: Find JAVA_HOME path on target host
      shell: readlink -f $(which java) | sed "s:bin/java::"
      register: java_home_path_cmd
      changed_when: false
    - name: Configure java.home in bootstrap.conf
      lineinfile:
        path: "{{ nifi_home }}/conf/bootstrap.conf"
        regexp: ^java\.home=
        line: java.home={{ java_home_path_cmd.stdout }}
        create: yes
    - name: Ensure NiFi HTTP host is 0.0.0.0
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.web\.http\.host=
        line: nifi.web.http.host=0.0.0.0
        create: yes
    - name: Ensure NiFi HTTP port is 8080
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.web\.http\.port=
        line: nifi.web.http.port=8080
        create: yes
    - name: Ensure HTTP network interface default is blank
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.web\.http\.network\.interface\.default=
        line: nifi.web.http.network.interface.default=
        create: yes
    - name: Comment out NiFi HTTPS & security props
      replace:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^(nifi\.web\.https\.(host|port)|nifi\.security\.(keystore|keystoreType|keystorePasswd|keyPasswd|truststore|truststoreType|truststorePasswd))=.*
        replace: "# \\\\0"
    - name: Clear remote input host
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.remote\.input\.host=
        line: nifi.remote.input.host=
        create: yes
    - name: Disable secure Site-to-Site
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.remote\.input\.secure=
        line: nifi.remote.input.secure=false
        create: yes
    - name: Clear remote input socket port
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.remote\.input\.socket\.port=
        line: nifi.remote.input.socket.port=
        create: yes
    - name: Enable Site-to-Site over HTTP
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.remote\.input\.http\.enabled=
        line: nifi.remote.input.http.enabled=true
        create: yes
    - name: Set Site-to-Site HTTP transaction TTL
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.remote\.input\.http\.transaction\.ttl=
        line: nifi.remote.input.http.transaction.ttl=30 sec
        create: yes
    - name: Set content cache expiration
      lineinfile:
        path: "{{ nifi_home }}/conf/nifi.properties"
        regexp: ^#?nifi\.remote\.contents\.cache\.expiration=
        line: nifi.remote.contents.cache.expiration=30 secs
        create: yes
    - name: Start NiFi
      become_user: "{{ nifi_user }}"
      command: "{{ nifi_home }}/bin/nifi.sh start"
      environment:
        JAVA_HOME: "{{ java_home_path_cmd.stdout }}"
    - name: Wait for NiFi to start listening on 8080
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: 8080
        delay: 5
        timeout: 300
    - name: Check NiFi status
      command: "{{ nifi_home }}/bin/nifi.sh status"
      register: nifi_status
    - name: Print NiFi status
      debug:
        var: nifi_status.stdout
